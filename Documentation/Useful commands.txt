Packages installed to run the software:

python -m pip install pyserial
pip install pyqtgraph
pip install PyQt6
pip install pyyaml

Useful commands:
~ Find index in np array:
np.where(y == y.min())[0][0]

~Add text marker at x y pos:
in init:
# Creating marker to indicate maximum absorption
        self.text = pg.TextItem(html='<div style="text-align: center"><span style="color: #FFF;">Maximum absorption at</span><br><span style="color: #FF0; font-size: 12pt;">0</span></div>', anchor=(-0.12,1.3), border='w', fill=(0, 0, 255, 100))
        self.p1.addItem(self.text)
        self.arrow = pg.ArrowItem(angle=-45)
        self.p1.addItem(self.arrow)
in update:
# Updating marker position and text
                x_of_max=x[np.where(y == y.min())[0][0]]
                self.text.setPos(x_of_max, y.min())
                self.text.setHtml('<div style="text-align: right"><span style="color: #FFF;">Maximum absorption at:</span><br><span style="color: #FF0; font-size: 12pt;">{}</span></div>'.format(str(x_of_max)))

                ## Draw an arrowhead next to the text box
                self.arrow.setPos(x_of_max, y.min())
				
~Add text marker at index following the curve:
in init: 
 # Marker 2:
        self.curvePoint = pg.CurvePoint(self.curve1)
        self.p1.addItem(self.curvePoint)
        self.text2 = pg.TextItem("test", anchor=(0.5, -1.0))
        self.text2.setParentItem(self.curvePoint)
        self.arrow2 = pg.ArrowItem(angle=90)
        self.arrow2.setParentItem(self.curvePoint)
in update:
## Control the animated arrow and text that track the curve
                index = np.where(y == y.min())[0][0]
                self.curvePoint.setPos(float(index)/(x.size-1))
                # self.text2.viewRangeChanged()
                self.text2.setText('[%0.1f, %0.1f]' % (x[index], y[index]))
				
				
Adding physical units:
According to mac_device library (class) (line 35 to 50, class Laser Current Source):
23657 is equal to 0.92 mA
and to convert from current to machine units the following equation is used:

self._current_word = int(value/2.5*(2.**16))
        self.parent.send("9 " + str(self._current_word))
		
		
~~~~Things to look up:
Python marker (property and setter)
assert function

$$$$$$$
testing function
void DAC_load(int CS_pin) {                             // Loads data to LTC1655L 16-bit DAC through SPI, takes the CS pin as input
  unsigned int value = Serial.parseInt();               // Parses an int from the serial input
  // global_DAC_VCSEL_current=value; // test
  ADC_startup();
  // Serial.print("[");
  for(int i=29000;i<35000;i+=200){
    value = i;
    byte byte1 = (value >> 8);   // byte1 (MSb) = 0x xxxx xxxx 0000 0000
    byte byte2 = (value & 0xff); // byte2 (LSb) = 0x 0000 0000 xxxx xxxx
    digitalWrite(CS_pin, LOW);
    SPI.transfer(byte1);                                  
    SPI.transfer(byte2);
    digitalWrite(CS_pin, HIGH);  // The DAC register loads the data from the shift register when CS/LD is pulled high.
    // Serial.print("D DAC word: ");
    // Serial.print(byte1, BIN);
    // Serial.println(byte2, BIN);

    Serial.print(String(value));
    Serial.print(" ");
    Serial.println(String(ADC_read()));
    delay(500);
  }
  // Serial.print("]");
}
